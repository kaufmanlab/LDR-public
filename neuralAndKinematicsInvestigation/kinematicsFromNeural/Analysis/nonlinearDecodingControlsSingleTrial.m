function output = nonlinearDecodingControlsSingleTrial
%% OVERVIEW

% This function controls for the linear decoding performed using TBF by
% comparing it linear decoding from recordings, and non-linear decoding from 
% recordings. Instantaneous decoding is compared with both 20 ms and 100 ms smoothing. 

%% Parameters.

% Declare the kernel used for non-linear mapping.
kernelType = 'OU';

% Declares the length scale of the kernel.
kernelScale = 10^2;

% Declare the regularization on the kernel for nonlinear mapping.
nonlinearL2 = 0.1;

% Declare the regularization on the linear mapping.
linearL2 = 1;

% Declare the train-test ratio.
holdOutNum = 2;

%% Control for decoding.

% Load the data.
load('ShenoyMonkeyData');
ShenoyMonkeyData = ShenoyMonkeyData(1:2);
load('ShenoyMonkeyDataSingleTrial');
load('inferKinematicsFromLoadingsSingleTrial');

% For each monkey and brain region, prepare for analysis.
for monkey = 1:size(ShenoyMonkeyData,2)
    % M1.
    output(monkey).M1 = prepForAnalysis(ShenoyMonkeyData(monkey).M1, ...
        ShenoyMonkeyDataSingleTrial(monkey).M1, ...
        ShenoyMonkeyData(monkey).Kinematics, ...
        ShenoyMonkeyDataSingleTrial(monkey).Kinematics, ...
        kernelType,kernelScale,nonlinearL2,linearL2,holdOutNum, ...
        inferKinematicsFromLoadingsSingleTrial(monkey).M1.nonlinearPrediction);
    % PMd.
    output(monkey).PMd = prepForAnalysis(ShenoyMonkeyData(monkey).PMd, ...
        ShenoyMonkeyDataSingleTrial(monkey).PMd, ...
        ShenoyMonkeyData(monkey).Kinematics, ...
        ShenoyMonkeyDataSingleTrial(monkey).Kinematics, ...
        kernelType,kernelScale,nonlinearL2,linearL2,holdOutNum, ...
        inferKinematicsFromLoadingsSingleTrial(monkey).PMd.nonlinearPrediction);
    % Pooled.
    output(monkey).pooled = prepForAnalysis( ...
        poolDatasets(ShenoyMonkeyData(monkey).PMd,ShenoyMonkeyData(monkey).M1), ...
        poolDatasets(ShenoyMonkeyDataSingleTrial(monkey).PMd, ...
        ShenoyMonkeyDataSingleTrial(monkey).M1), ...
        ShenoyMonkeyData(monkey).Kinematics, ...
        ShenoyMonkeyDataSingleTrial(monkey).Kinematics, ...
        kernelType,kernelScale,nonlinearL2,linearL2,holdOutNum, ...
        inferKinematicsFromLoadingsSingleTrial(monkey).pooled.nonlinearPrediction);
end

end

%% Subfunction for organizing datasets before analysis.

function output = prepForAnalysis(data,trialData,kin,trialKin,kernelType,kernelScale,nonLinearL2, ...
    linearL2,holdOutNum,nonlinearPreds)

% Prune out repeats.
data = pruneRepeats(data);
kin = pruneRepeats(kin);
trialData = preprocessTrials(pruneRepeatsTrial(trialData));
trialKin = pruneRepeatsTrial(trialKin);

% Assign the linear prediction.
output.nonlinearPrediction = nonlinearPreds;

%% Comparison against linear controls. 

% Perform linear decoding of position with 20 ms smoothing.
[lagged,output.linearDecoding.pos.kernel20ms.predicted] = predictKinUsingData(trialKin,holdOutNum,trialData, ...
    linearL2,10,0);
output.linearDecoding.pos.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.linearDecoding.pos.kernel20ms.predicted);
output.linearDecoding.pos.kernel20ms.posPVal = signrank( ...
    output.linearDecoding.pos.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.linearDecoding.pos.kernel20ms.velPVal = signrank( ...
    output.linearDecoding.pos.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform linear decoding of position with 100 ms smoothing.
[lagged,output.linearDecoding.pos.kernel100ms.predicted] = predictKinUsingData(trialKin,holdOutNum,trialData, ...
    linearL2,10,10);
output.linearDecoding.pos.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.linearDecoding.pos.kernel100ms.predicted);
output.linearDecoding.pos.kernel100ms.posPVal = signrank( ...
    output.linearDecoding.pos.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.linearDecoding.pos.kernel100ms.velPVal = signrank( ...
    output.linearDecoding.pos.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform linear decoding of velocity with 20 ms smoothing.
[lagged,output.linearDecoding.vel.kernel20ms.predicted] = predictKinUsingData(NthDerivative(trialKin,1,'raw'), ...
    holdOutNum,trialData,linearL2,10,0);
[output.linearDecoding.vel.kernel20ms.predicted,lagged] ...
    = postHoc(output.linearDecoding.vel.kernel20ms.predicted,lagged);
output.linearDecoding.vel.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.linearDecoding.vel.kernel20ms.predicted);
output.linearDecoding.vel.kernel20ms.posPVal = signrank( ...
    output.linearDecoding.vel.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.linearDecoding.vel.kernel20ms.velPVal = signrank( ...
    output.linearDecoding.vel.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform linear decoding of velocity with 100 ms smoothing.
[lagged,output.linearDecoding.vel.kernel100ms.predicted] = predictKinUsingData(NthDerivative(trialKin,1,'raw'), ...
    holdOutNum,trialData,linearL2,10,10);
[output.linearDecoding.vel.kernel100ms.predicted,lagged] = ...
    postHoc(output.linearDecoding.vel.kernel100ms.predicted,lagged);
output.linearDecoding.vel.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.linearDecoding.vel.kernel100ms.predicted);
output.linearDecoding.vel.kernel100ms.posPVal = signrank( ...
    output.linearDecoding.vel.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.linearDecoding.vel.kernel100ms.velPVal = signrank( ...
    output.linearDecoding.vel.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

%% Comparison against non-linear controls with trial subselection.

% Perform nonlinear decoding of position with 20 ms smoothing.
[lagged,output.nonlinearDecoding.pos.kernel20ms.predicted] = predictKinUsingDataNonlinear(trialKin,holdOutNum,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,0);
output.nonlinearDecoding.pos.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecoding.pos.kernel20ms.predicted);
output.nonlinearDecoding.pos.kernel20ms.posPVal = signrank( ...
    output.nonlinearDecoding.pos.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecoding.pos.kernel20ms.velPVal = signrank( ...
    output.nonlinearDecoding.pos.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of position with 100 ms smoothing.
[lagged,output.nonlinearDecoding.pos.kernel100ms.predicted] = predictKinUsingDataNonlinear(trialKin,holdOutNum,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,10);
output.nonlinearDecoding.pos.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecoding.pos.kernel100ms.predicted);
output.nonlinearDecoding.pos.kernel100ms.posPVal = signrank( ...
    output.nonlinearDecoding.pos.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecoding.pos.kernel100ms.velPVal = signrank( ...
    output.nonlinearDecoding.pos.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of velocity with 20 ms smoothing.
[lagged,output.nonlinearDecoding.vel.kernel20ms.predicted] = ...
    predictKinUsingDataNonlinear(NthDerivative(trialKin,1,'raw'),holdOutNum,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,0);
[output.nonlinearDecoding.vel.kernel20ms.predicted,lagged] ...
    = postHoc(output.nonlinearDecoding.vel.kernel20ms.predicted,lagged);
output.nonlinearDecoding.vel.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecoding.vel.kernel20ms.predicted);
output.nonlinearDecoding.vel.kernel20ms.posPVal = signrank( ...
    output.nonlinearDecoding.vel.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecoding.vel.kernel20ms.velPVal = signrank( ...
    output.nonlinearDecoding.vel.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of velocity with 100 ms smoothing.
[lagged,output.nonlinearDecoding.vel.kernel100ms.predicted] = ...
    predictKinUsingDataNonlinear(NthDerivative(trialKin,1,'raw'),holdOutNum,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,10);
[output.nonlinearDecoding.vel.kernel100ms.predicted,lagged] ...
    = postHoc(output.nonlinearDecoding.vel.kernel100ms.predicted,lagged);
output.nonlinearDecoding.vel.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecoding.vel.kernel100ms.predicted);
output.nonlinearDecoding.vel.kernel100ms.posPVal = signrank( ...
    output.nonlinearDecoding.vel.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecoding.vel.kernel100ms.velPVal = signrank( ...
    output.nonlinearDecoding.vel.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

%% Comparison against non-linear controls with trial averaged predictors..

% Perform nonlinear decoding of position with 20 ms smoothing.
[lagged,output.nonlinearDecodingTA.pos.kernel20ms.predicted] = predictKinUsingDataNonlinearTrialAveraged ...
    (kin,trialKin,holdOutNum,data,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,0);
output.nonlinearDecodingTA.pos.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecodingTA.pos.kernel20ms.predicted);
output.nonlinearDecodingTA.pos.kernel20ms.posPVal = signrank( ...
    output.nonlinearDecodingTA.pos.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecodingTA.pos.kernel20ms.velPVal = signrank( ...
    output.nonlinearDecodingTA.pos.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of position with 100 ms smoothing.
[lagged,output.nonlinearDecodingTA.pos.kernel100ms.predicted] = predictKinUsingDataNonlinearTrialAveraged ...
    (kin,trialKin,holdOutNum,data,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,10);
output.nonlinearDecodingTA.pos.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecodingTA.pos.kernel100ms.predicted);
output.nonlinearDecodingTA.pos.kernel100ms.posPVal = signrank( ...
    output.nonlinearDecodingTA.pos.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecodingTA.pos.kernel100ms.velPVal = signrank( ...
    output.nonlinearDecodingTA.pos.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of velocity with 20 ms smoothing.
[lagged,output.nonlinearDecodingTA.vel.kernel20ms.predicted] = ...
    predictKinUsingDataNonlinearTrialAveraged(NthDerivative(kin,1,'raw'),NthDerivative(trialKin,1,'raw'),holdOutNum,data,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,0);
[output.nonlinearDecodingTA.vel.kernel20ms.predicted,lagged] ...
    = postHoc(output.nonlinearDecodingTA.vel.kernel20ms.predicted,lagged);
output.nonlinearDecodingTA.vel.kernel20ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecodingTA.vel.kernel20ms.predicted);
output.nonlinearDecodingTA.vel.kernel20ms.posPVal = signrank( ...
    output.nonlinearDecodingTA.vel.kernel20ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecodingTA.vel.kernel20ms.velPVal = signrank( ...
    output.nonlinearDecodingTA.vel.kernel20ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of velocity with 100 ms smoothing.
[lagged,output.nonlinearDecodingTA.vel.kernel100ms.predicted] = ...
    predictKinUsingDataNonlinearTrialAveraged(NthDerivative(kin,1,'raw'),NthDerivative(trialKin,1,'raw'),holdOutNum,data,trialData, ...
    kernelType,[kernelScale nonLinearL2],10,10);
[output.nonlinearDecodingTA.vel.kernel100ms.predicted,lagged] ...
    = postHoc(output.nonlinearDecodingTA.vel.kernel100ms.predicted,lagged);
output.nonlinearDecodingTA.vel.kernel100ms.varExplained = getVarExplainedKinematics( ...
    lagged,output.nonlinearDecodingTA.vel.kernel100ms.predicted);
output.nonlinearDecodingTA.vel.kernel100ms.posPVal = signrank( ...
    output.nonlinearDecodingTA.vel.kernel100ms.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.nonlinearDecodingTA.vel.kernel100ms.velPVal = signrank( ...
    output.nonlinearDecodingTA.vel.kernel100ms.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

%% Perform decoding from GPFA trajectories.

% Copy over gpfa trajectories.
gpfaTrials = trialData;
for trial = 1:size(gpfaTrials,2)
    gpfaTrials(trial).matrix = gpfaTrials(trial).gpfaTraj;
end

% Perform linear decoding of position.
[lagged,output.gpfaDecoding.pos.noKernel.predicted] = predictKinUsingData(trialKin,holdOutNum,gpfaTrials, ...
    0,10,0);
output.gpfaDecoding.pos.noKernel.varExplained = getVarExplainedKinematics( ...
    lagged,output.gpfaDecoding.pos.noKernel.predicted);
output.gpfaDecoding.pos.noKernel.posPVal = signrank( ...
    output.gpfaDecoding.pos.noKernel.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.gpfaDecoding.pos.noKernel.velPVal = signrank( ...
    output.gpfaDecoding.pos.noKernel.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform linear decoding of velocity.
[lagged,output.gpfaDecoding.vel.noKernel.predicted] = predictKinUsingData(NthDerivative(trialKin,1,'raw'), ...
    holdOutNum,gpfaTrials,linearL2,10,0);
[output.gpfaDecoding.vel.noKernel.predicted,lagged] ...
    = postHoc(output.gpfaDecoding.vel.noKernel.predicted,lagged);
output.gpfaDecoding.vel.noKernel.varExplained = getVarExplainedKinematics( ...
    lagged,output.gpfaDecoding.vel.noKernel.predicted);
output.gpfaDecoding.vel.noKernel.posPVal = signrank( ...
    output.gpfaDecoding.vel.noKernel.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.gpfaDecoding.vel.noKernel.velPVal = signrank( ...
    output.gpfaDecoding.vel.noKernel.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of position.
[lagged,output.gpfaNonlinearDecoding.pos.noKernel.predicted] = predictKinUsingDataNonlinear(trialKin,holdOutNum,gpfaTrials, ...
    kernelType,[kernelScale nonLinearL2],10,0);
output.gpfaNonlinearDecoding.pos.noKernel.varExplained = getVarExplainedKinematics( ...
    lagged,output.gpfaNonlinearDecoding.pos.noKernel.predicted);
output.gpfaNonlinearDecoding.pos.noKernel.posPVal = signrank( ...
    output.gpfaNonlinearDecoding.pos.noKernel.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.gpfaNonlinearDecoding.pos.noKernel.velPVal = signrank( ...
    output.gpfaNonlinearDecoding.pos.noKernel.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

% Perform nonlinear decoding of velocity.
[lagged,output.gpfaNonlinearDecoding.vel.noKernel.predicted] = ...
    predictKinUsingDataNonlinear(NthDerivative(trialKin,1,'raw'),holdOutNum,gpfaTrials, ...
    kernelType,[kernelScale nonLinearL2],10,0);
[output.gpfaNonlinearDecoding.vel.noKernel.predicted,lagged] ...
    = postHoc(output.gpfaNonlinearDecoding.vel.noKernel.predicted,lagged);
output.gpfaNonlinearDecoding.vel.noKernel.varExplained = getVarExplainedKinematics( ...
    lagged,output.gpfaNonlinearDecoding.vel.noKernel.predicted);
output.gpfaNonlinearDecoding.vel.noKernel.posPVal = signrank( ...
    output.gpfaNonlinearDecoding.vel.noKernel.varExplained.pos.array, ...
    output.nonlinearPrediction.varExplained.pos.array);
output.gpfaNonlinearDecoding.vel.noKernel.velPVal = signrank( ...
    output.gpfaNonlinearDecoding.vel.noKernel.varExplained.vel.array, ...
    output.nonlinearPrediction.varExplained.vel.array);

end



